#include<cstdio>
#include<iostream>
#include<cmath>
#include<string>
#include<sstream>
#include<vector>
#include<array>
#include<map>
#include<unordered_map>
#include<algorithm>
#include<set>
#include<unordered_set>
#include<iomanip>//小数点精确
using namespace std;

int WinOrLose(char& a, char& b)
{
	if (a == 'C')
	{
		switch (b)
		{
		case 'C':
		{
			return 0;
			break;
		}
		case 'B':
		{
			return -1;
			break;
		}
		case 'J':
		{
			return 1;
			break;
		}
		}
	}
	else if (a == 'J')
	{
		switch (b)
		{
		case 'C':
		{
			return -1;
			break;
		}
		case 'B':
		{
			return 1;
			break;
		}
		case 'J':
		{
			return 0;
			break;
		}
		}
	}
	else
	{
		switch (b)
		{
		case 'C':
		{
			return 1;
			break;
		}
		case 'B':
		{
			return 0;
			break;
		}
		case 'J':
		{
			return -1;
			break;
		}
		}
	}
	return 0;
}
int main()
{
	ios::sync_with_stdio(false);
	int N;
	cin >> N;

	int W=0, L=0, P=0;
	vector<int> v1(3);
	vector<int> v2(3);
	char A, B;
	int res;
	for (int i = 0; i < N; i++)
	{
		cin >> A >> B;
		res = WinOrLose(A, B);
		switch (res)
		{
		case 1:
		{   W++;
		switch (A)
		{
		case 'C': {v1[1]++; break; }
		case 'B': {v1[0]++; break; }
		case 'J': {v1[2]++; break; }
		}
		break;
		}
		case 0: {P++; break; }
		case -1:
		{L++;
		switch (B)
		{
		case 'C': {v2[1]++; break; }
		case 'B': {v2[0]++; break; }
		case 'J': {v2[2]++; break; }
				break;
		}
		}
		}
	}
	
	int max1Pos = max_element(v1.begin(), v1.end()) - v1.begin();
	int max2Pos = max_element(v2.begin(), v2.end()) - v2.begin();
	char max1, max2;
	switch (max1Pos)
	{
	case 0: {max1 = 'B'; break; }
	case 1: {max1 = 'C'; break; }
	case 2: {max1 = 'J'; break; }
	}
	switch (max2Pos)
	{
	case 0: {max2 = 'B'; break; }
	case 1: {max2 = 'C'; break; }
	case 2: {max2 = 'J'; break; }
	}
	cout << W << " " << P << " " << L << '\n';
	cout << L << " " << P << " " << W << '\n';
	cout << max1 << " " << max2 << '\n';

	system("pause");
	return 0;
}